<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KEngine.Editor</name>
    </assembly>
    <members>
        <member name="T:CosmosTable.InvalidExcelException">
            <summary>
            Invali Excel Exception
            </summary>
        </member>
        <member name="T:CosmosTable.RenderTemplateVars">
            <summary>
            用来进行模板渲染
            </summary>
        </member>
        <member name="P:CosmosTable.RenderFieldVars.TypeMethod">
            <summary>
            经过格式化，去掉[]的类型字符串，支持数组(int[] -> int_array), 字典(map[string]int) -> map_string_int
            </summary>
        </member>
        <member name="P:CosmosTable.RenderFieldVars.FormatType">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:CosmosTable.Compiler">
            <summary>
            Compile Excel to TSV
            </summary>
        </member>
        <member name="M:CosmosTable.Compiler.CheckCommentString(System.String)">
            <summary>
            检查一个表头名，是否是可忽略的注释
            或检查一个字符串
            </summary>
            <param name="colNameStr"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosTable.SimpleExcelFile">
            <summary>
            简单的NPOI Excel封装
            </summary>
        </member>
        <member name="F:CosmosTable.SimpleExcelFile.PreserverRowCount">
            <summary>
            Header, Statement, Comment, at lease 3 rows
            预留行数
            </summary>
        </member>
        <member name="M:CosmosTable.SimpleExcelFile.HasColumn(System.String)">
            <summary>
            是否存在列名
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosTable.SimpleExcelFile.ClearRow(System.Int32)">
            <summary>
            清除行内容
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:CosmosTable.SimpleExcelFile.GetString(System.String,System.Int32)">
            <summary>
            </summary>
            <param name="columnName"></param>
            <param name="dataRow">无计算表头的数据行数</param>
            <returns></returns>
        </member>
        <member name="M:CosmosTable.SimpleExcelFile.GetRowsCount">
            <summary>
            不带3个预留头的数据总行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosTable.SimpleExcelFile.GetWorksheetCount">
            <summary>
            工作表的总行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosTable.SimpleExcelFile.GetColumnCount">
            <summary>
            获取列总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:KEngine.Editor.KAutoBuilder.PerformBuild(System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
            <summary>
            return full path or build
            </summary>
            <param name="outputpath"></param>
            <param name="tag"></param>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:KBuildTools.MakeSureExportPath(System.String,UnityEditor.BuildTarget,KResourceQuality)">
            <summary>
            获取完整的打包路径，并确保目录存在
            </summary>
            <param name="path"></param>
            <param name="buildTarget"></param>
            <returns></returns>
        </member>
        <member name="M:KBuildTools.GetExportPath(UnityEditor.BuildTarget,KResourceQuality)">
            <summary>
            Extra Flag ->   ex:  Android/  AndroidSD/  AndroidHD/
            </summary>
            <param name="platfrom"></param>
            <param name="quality"></param>
            <returns></returns>
        </member>
        <member name="M:KBuildTools.CheckAndLogDependencies(System.String)">
            <summary>
            检查如果有依赖，报出
            检查prefab中存在prefab依赖，进行打散！
            </summary>
            <param name="assetPath"></param>
        </member>
        <member name="M:KBuildTools.HasDefineSymbol(System.String)">
            <summary>
            是否有指定宏呢
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:KBuildTools.RemoveDefineSymbols(System.String)">
            <summary>
            移除指定宏
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:KBuildTools.AddDefineSymbols(System.String)">
            <summary>
            添加指定宏（不重复）
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:KEngine.Editor.KEngineUtils.SetConfValue(System.String,System.String)">
            <summary>
            Set KEngineConfig.txt file,  and reload AppEngine's instance of EngineConfigs, (Editor only)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KEngine.Editor.KEngineUtils.SaveConfigFile">
            <summary>
            Save to EngineConfig
            </summary>
        </member>
        <member name="T:KExcelFile">
            <summary>
            基于NPOI操作Excel文件
            </summary>
        </member>
        <member name="M:KExcelFile.ClearRow(System.Int32)">
            <summary>
            清除行内容
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:KEngine.Editor.KSettingModuleEditor">
            <summary>
            For SettingModule
            </summary>
        </member>
        <member name="F:KEngine.Editor.KSettingModuleEditor.SettingExtension">
            <summary>
            编译出的后缀名
            </summary>
        </member>
        <member name="F:KEngine.Editor.KSettingModuleEditor.SettingCodePath">
            <summary>
            生成代码吗？它的路径配置
            </summary>
        </member>
        <member name="F:KEngine.Editor.KSettingModuleEditor._isPopUpConfirm">
            <summary>
            标记，是否正在打开提示配置变更对话框
            </summary>
        </member>
        <member name="T:KResourceBuilder">
            <summary>
            项目资源导出器
            根据策略，导出_ResourceBuild_的东西
            </summary>
        </member>
        <member name="T:KUnityEditorTools.KDefineSymbolsHelper">
            <summary>
            用于预编译指令（宏）的增删查
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KDefineSymbolsHelper.HasDefineSymbol(System.String)">
            <summary>
            是否有指定宏呢
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:KUnityEditorTools.KDefineSymbolsHelper.RemoveDefineSymbols(System.String)">
            <summary>
            移除指定宏
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:KUnityEditorTools.KDefineSymbolsHelper.AddDefineSymbols(System.String)">
            <summary>
            添加指定宏（不重复）
            </summary>
            <param name="symbol">宏</param>
        </member>
        <member name="T:KUnityEditorTools.KDirectoryWatcher">
            <summary>
            一个目录监视器
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KDirectoryWatcher.#ctor(System.String,System.IO.FileSystemEventHandler)">
            <summary>
            监视一个目录，如果有修改则触发事件函数, 包含其子目录！
            <para>使用更大的buffer size确保及时触发事件</para>
            <para>不用includesubdirect参数，使用自己的子目录扫描，更稳健</para>
            </summary>
            <param name="dirPath"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="T:KUnityEditorTools.KEditorUtils">
            <summary>
            Shell / cmd / 等等常用Editor需要用到的工具集
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KEditorUtils._mainThreadActions">
            <summary>
            用于非主线程里执行主线程的函数
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.OnEditorUpdate">
            <summary>
            捕获Unity Editor update事件
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.CallMainThread(System.Action)">
            <summary>
            异步线程回到主线程进行回调
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.ClearConsoleLog">
            <summary>
            清除Console log
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.ExecuteCommand(System.String,System.String)">
            <summary>
            执行批处理命令
            </summary>
            <param name="command"></param>
            <param name="workingDirectory"></param>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.EachDirectoryFiles(System.String,KUnityEditorTools.KEditorUtils.EachDirectoryDelegate)">
            <summary>
            递归一个目录所有文件，callback
            </summary>
            <param name="dirPath"></param>
            <param name="eachCallback"></param>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.GetCleanPath(System.String)">
            <summary>
            将丑陋的windows路径，替换掉\字符
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:KUnityEditorTools.KEditorUtils.FindStrMatchesInFolderTexts(System.String,System.Text.RegularExpressions.Regex,System.Func{System.String,System.Boolean})">
            <summary>
            在指定目录中搜寻字符串并返回匹配}
            </summary>
            <param name="sourceFolder"></param>
            <param name="searchWord"></param>
            <param name="fileFilter"></param>
            <returns></returns>
        </member>
        <member name="T:KUnityEditorTools.KSymbolLinkHelper">
            <summary>
            硬链接目录工具。。。支持win+mac, 需要win 7以上才有mklink命令
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KSymbolLinkHelper.DeleteLink(System.String)">
            <summary>
            删除硬链接目录
            </summary>
            <param name="linkPath"></param>
        </member>
        <member name="M:KUnityEditorTools.KSymbolLinkHelper.DeleteAllLinks(System.String)">
            <summary>
            删除指定目录所有硬链接
            </summary>
            <param name="assetBundlesLinkPath"></param>
        </member>
        <member name="T:KUnityEditorTools.KUnityEditorEventCatcher">
            <summary>
            用于捕捉编辑器变更事件，不做具体逻辑处理，只暴露各种封装事件
            
            注意不要加具体逻辑在这里，namespace KAdminTools 没有具体逻辑依赖具体逻辑塞到KGameAdminEditor里
            
            具体逻辑使用时，注意加上[InitializeOnLoad]
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KUnityEditorEventCatcher._OnEditorUpdateEvent">
            <summary>
            Editor update事件
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KUnityEditorEventCatcher._OnWillPlayEvent">
            <summary>
            将要播放游戏事件
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KUnityEditorEventCatcher._OnBeginPlayEvent">
            <summary>
            进入播放时刻事件
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KUnityEditorEventCatcher._OnWillStopEvent">
            <summary>
            将要停止游戏 (不包括暂停哦)
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KUnityEditorEventCatcher._OnLockingAssembly">
            <summary>
            程序集锁定事件，事件中可以进行DLL的注入修改
            </summary>
        </member>
        <member name="F:KUnityEditorTools.KUnityEditorEventCatcher.OnPostBuildPlayerEvent">
            <summary>
            编译完成后事件
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KUnityEditorEventCatcher.OnPostBuildPlayer(UnityEditor.BuildTarget,System.String)">
            <summary>
            Unity标准Build后处理函数
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KUnityEditorEventCatcher.OnPlayModeStateChanged">
            <summary>
            播放状态改变，进行一些编译性的东西, 比如点击播放，编译文件、编译脚本、编译配置等
            </summary>
        </member>
        <member name="M:KUnityEditorTools.KUnityEditorEventCatcher.OnEditorUpdate">
            <summary>
            捕捉编译过程中、同时播放游戏的状态，强制暂停，避免运行出错
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:KUnityEditorTools.KUnityEditorEventCatcher.IsInited">
            <summary>
            是否静态构造完成
            </summary>
        </member>
    </members>
</doc>
