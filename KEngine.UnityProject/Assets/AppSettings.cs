
#region Copyright (c) 2015 KEngine / Kelly <http://github.com/mr-kelly>, All rights reserved.

// KEngine - Asset Bundle framework for Unity3D
// ===================================
// 
// Author:  Kelly
// Email: 23110388@qq.com
// Github: https://github.com/mr-kelly/KEngine
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library.

#endregion

// This file is auto generated by KSettingModuleEditor.cs!
// Don't manipulate me!

using System.Collections;
using System.Collections.Generic;
using CosmosTable;
using KEngine.Modules;
namespace AppSettings
{

	/// <summary>
	/// Auto Generate for Tab File: Example.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class ExampleInfos
    {
		public static readonly string TabFilePath = "Example.bytes";

        public static TableFile GetTableFile()
        {
            return SettingModule.Get(TabFilePath);
        }

        public static IEnumerable GetAll()
        {
            var tableFile = SettingModule.Get(TabFilePath);
            foreach (var row in tableFile)
            {
                yield return ExampleInfo.Wrap(row);
            }
        }

        public static ExampleInfo GetByPrimaryKey(object primaryKey)
        {
            var tableFile = SettingModule.Get(TabFilePath);
            var row = tableFile.GetByPrimaryKey(primaryKey);
            if (row == null) return null;
            return ExampleInfo.Wrap(row);
        }
    }
	/// <summary>
	/// Auto Generate for Tab File: Example.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class ExampleInfo : TableRowParser
	{

		private static ExampleInfo _instance;

        public static ExampleInfo Wrap(TableRow row)
        {
            var inst = _instance ?? (_instance = new ExampleInfo());
            inst._row = row;
            return inst;
        }

        private TableRow _row;

        private ExampleInfo()
        {
        }

		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id
        {
            get
            {
                return _row.Get_string(_row.Values[0], "");
            }
            set
            {
                _row[0] = value.ToString();
            }
        }
		
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name
        {
            get
            {
                return _row.Get_string(_row.Values[1], "");
            }
            set
            {
                _row[1] = value.ToString();
            }
        }
		
        /// <summary>
        /// 用于组合成Id主键
        /// </summary>
        public string KeyString
        {
            get
            {
                return _row.Get_string(_row.Values[2], "");
            }
            set
            {
                _row[2] = value.ToString();
            }
        }
		
        /// <summary>
        /// 数据测试
        /// </summary>
        public int Number
        {
            get
            {
                return _row.Get_int(_row.Values[3], "");
            }
            set
            {
                _row[3] = value.ToString();
            }
        }
		
        /// <summary>
        /// ArrayTest/测试数组
        /// </summary>
        public string[] StrArray
        {
            get
            {
                return _row.Get_string_array(_row.Values[4], "");
            }
            set
            {
                _row[4] = value.ToString();
            }
        }
		
        /// <summary>
        /// 字典测试
        /// </summary>
        public Dictionary<string,int> StrIntMap
        {
            get
            {
                return _row.Get_Dictionary_string_int(_row.Values[5], "");
            }
            set
            {
                _row[5] = value.ToString();
            }
        }
		
	}

	/// <summary>
	/// Auto Generate for Tab File: Subdir/Example2.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class SubdirExample2Infos
    {
		public static readonly string TabFilePath = "Subdir/Example2.bytes";

        public static TableFile GetTableFile()
        {
            return SettingModule.Get(TabFilePath);
        }

        public static IEnumerable GetAll()
        {
            var tableFile = SettingModule.Get(TabFilePath);
            foreach (var row in tableFile)
            {
                yield return SubdirExample2Info.Wrap(row);
            }
        }

        public static SubdirExample2Info GetByPrimaryKey(object primaryKey)
        {
            var tableFile = SettingModule.Get(TabFilePath);
            var row = tableFile.GetByPrimaryKey(primaryKey);
            if (row == null) return null;
            return SubdirExample2Info.Wrap(row);
        }
    }
	/// <summary>
	/// Auto Generate for Tab File: Subdir/Example2.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class SubdirExample2Info : TableRowParser
	{

		private static SubdirExample2Info _instance;

        public static SubdirExample2Info Wrap(TableRow row)
        {
            var inst = _instance ?? (_instance = new SubdirExample2Info());
            inst._row = row;
            return inst;
        }

        private TableRow _row;

        private SubdirExample2Info()
        {
        }

		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id
        {
            get
            {
                return _row.Get_string(_row.Values[0], "");
            }
            set
            {
                _row[0] = value.ToString();
            }
        }
		
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name
        {
            get
            {
                return _row.Get_string(_row.Values[1], "");
            }
            set
            {
                _row[1] = value.ToString();
            }
        }
		
	}

	/// <summary>
	/// Auto Generate for Tab File: Subdir/__.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class SubdirInfos
    {
		public static readonly string TabFilePath = "Subdir/__.bytes";

        public static TableFile GetTableFile()
        {
            return SettingModule.Get(TabFilePath);
        }

        public static IEnumerable GetAll()
        {
            var tableFile = SettingModule.Get(TabFilePath);
            foreach (var row in tableFile)
            {
                yield return SubdirInfo.Wrap(row);
            }
        }

        public static SubdirInfo GetByPrimaryKey(object primaryKey)
        {
            var tableFile = SettingModule.Get(TabFilePath);
            var row = tableFile.GetByPrimaryKey(primaryKey);
            if (row == null) return null;
            return SubdirInfo.Wrap(row);
        }
    }
	/// <summary>
	/// Auto Generate for Tab File: Subdir/__.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class SubdirInfo : TableRowParser
	{

		private static SubdirInfo _instance;

        public static SubdirInfo Wrap(TableRow row)
        {
            var inst = _instance ?? (_instance = new SubdirInfo());
            inst._row = row;
            return inst;
        }

        private TableRow _row;

        private SubdirInfo()
        {
        }

		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id
        {
            get
            {
                return _row.Get_string(_row.Values[0], "");
            }
            set
            {
                _row[0] = value.ToString();
            }
        }
		
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name
        {
            get
            {
                return _row.Get_string(_row.Values[1], "");
            }
            set
            {
                _row[1] = value.ToString();
            }
        }
		
	}
 
}
