
#region Copyright (c) 2015 KEngine / Kelly <http://github.com/mr-kelly>, All rights reserved.

// KEngine - Asset Bundle framework for Unity3D
// ===================================
// 
// Author:  Kelly
// Email: 23110388@qq.com
// Github: https://github.com/mr-kelly/KEngine
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library.

#endregion

// This file is auto generated by KSettingModuleEditor.cs!
// Don't manipulate me!

using System.Collections;
using System.Collections.Generic;
using CosmosTable;
using KEngine;
using KEngine.Modules;
namespace AppSettings
{

	/// <summary>
	/// Auto Generate for Tab File: Example.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class ExampleInfos
    {
		public static readonly string TabFilePath = "Example.bytes";
        static ExampleInfos _instance = new ExampleInfos();
        Dictionary<string, ExampleInfo> _dict = new Dictionary<string, ExampleInfo>();

        /// <summary>
        /// Trigger delegate when reload the infos
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private ExampleInfos()
	    {
            ReloadAll();
#if UNITY_EDITOR
	        if (SettingModule.IsFileSystemMode)
	        {
	            SettingModule.WatchSetting(TabFilePath, (path) =>
	            {
	                if (path.Replace("\\", "/").EndsWith(path))
	                {
                        ReloadAll();
	                    KLogger.LogConsole_MultiThread("Reload success! -> " + path);
	                }
	            });
	        }
#endif
        }

	    public void ReloadAll()
        {
	        using (var tableFile = SettingModule.Get(TabFilePath))
	        {
	            foreach (var row in tableFile)
	            {
                    var pk = ExampleInfo.ParsePrimaryKey(row);
                    ExampleInfo info;
                    if (!_dict.TryGetValue(pk, out info))
                    {
                        info = new ExampleInfo(row);
                        _dict[info.Id] = info;
                    }
                    else info.Reload(row);
	            }
	            
	        }
	        if (OnReload != null)
	        {
	            OnReload();
	        }
        }
	    
        public static IEnumerable GetAll()
        {
            foreach (var row in _instance._dict.Values)
            {
                yield return row;
            }
        }
        
        public static ExampleInfo GetByPrimaryKey(string primaryKey)
        {
            ExampleInfo info;
            if (_instance._dict.TryGetValue(primaryKey, out info)) return info;
            return null;
        }
    }

	/// <summary>
	/// Auto Generate for Tab File: Example.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class ExampleInfo : TableRowParser
	{
		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id { get; private set;}
        
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name { get; private set;}
        
        /// <summary>
        /// 用于组合成Id主键
        /// </summary>
        public string KeyString { get; private set;}
        
        /// <summary>
        /// 数据测试
        /// </summary>
        public int Number { get; private set;}
        
        /// <summary>
        /// ArrayTest/测试数组
        /// </summary>
        public string[] StrArray { get; private set;}
        
        /// <summary>
        /// 字典测试
        /// </summary>
        public Dictionary<string,int> StrIntMap { get; private set;}
        

        internal ExampleInfo(TableRow row)
        {
            Reload(row);
        }

        internal void Reload(TableRow row)
        {
        
            Id = row.Get_string(row.Values[0], "");
        
            Name = row.Get_string(row.Values[1], "");
        
            KeyString = row.Get_string(row.Values[2], "");
        
            Number = row.Get_int(row.Values[3], "");
        
            StrArray = row.Get_string_array(row.Values[4], "");
        
            StrIntMap = row.Get_Dictionary_string_int(row.Values[5], "");
        
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static string ParsePrimaryKey(TableRow row)
        {
            var primaryKey = row.Get_string(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: Subdir/Example2.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class SubdirExample2Infos
    {
		public static readonly string TabFilePath = "Subdir/Example2.bytes";
        static SubdirExample2Infos _instance = new SubdirExample2Infos();
        Dictionary<int, SubdirExample2Info> _dict = new Dictionary<int, SubdirExample2Info>();

        /// <summary>
        /// Trigger delegate when reload the infos
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private SubdirExample2Infos()
	    {
            ReloadAll();
#if UNITY_EDITOR
	        if (SettingModule.IsFileSystemMode)
	        {
	            SettingModule.WatchSetting(TabFilePath, (path) =>
	            {
	                if (path.Replace("\\", "/").EndsWith(path))
	                {
                        ReloadAll();
	                    KLogger.LogConsole_MultiThread("Reload success! -> " + path);
	                }
	            });
	        }
#endif
        }

	    public void ReloadAll()
        {
	        using (var tableFile = SettingModule.Get(TabFilePath))
	        {
	            foreach (var row in tableFile)
	            {
                    var pk = SubdirExample2Info.ParsePrimaryKey(row);
                    SubdirExample2Info info;
                    if (!_dict.TryGetValue(pk, out info))
                    {
                        info = new SubdirExample2Info(row);
                        _dict[info.Id] = info;
                    }
                    else info.Reload(row);
	            }
	            
	        }
	        if (OnReload != null)
	        {
	            OnReload();
	        }
        }
	    
        public static IEnumerable GetAll()
        {
            foreach (var row in _instance._dict.Values)
            {
                yield return row;
            }
        }
        
        public static SubdirExample2Info GetByPrimaryKey(int primaryKey)
        {
            SubdirExample2Info info;
            if (_instance._dict.TryGetValue(primaryKey, out info)) return info;
            return null;
        }
    }

	/// <summary>
	/// Auto Generate for Tab File: Subdir/Example2.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class SubdirExample2Info : TableRowParser
	{
		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name { get; private set;}
        

        internal SubdirExample2Info(TableRow row)
        {
            Reload(row);
        }

        internal void Reload(TableRow row)
        {
        
            Id = row.Get_int(row.Values[0], "");
        
            Name = row.Get_string(row.Values[1], "");
        
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: Subdir/__.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class SubdirInfos
    {
		public static readonly string TabFilePath = "Subdir/__.bytes";
        static SubdirInfos _instance = new SubdirInfos();
        Dictionary<string, SubdirInfo> _dict = new Dictionary<string, SubdirInfo>();

        /// <summary>
        /// Trigger delegate when reload the infos
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private SubdirInfos()
	    {
            ReloadAll();
#if UNITY_EDITOR
	        if (SettingModule.IsFileSystemMode)
	        {
	            SettingModule.WatchSetting(TabFilePath, (path) =>
	            {
	                if (path.Replace("\\", "/").EndsWith(path))
	                {
                        ReloadAll();
	                    KLogger.LogConsole_MultiThread("Reload success! -> " + path);
	                }
	            });
	        }
#endif
        }

	    public void ReloadAll()
        {
	        using (var tableFile = SettingModule.Get(TabFilePath))
	        {
	            foreach (var row in tableFile)
	            {
                    var pk = SubdirInfo.ParsePrimaryKey(row);
                    SubdirInfo info;
                    if (!_dict.TryGetValue(pk, out info))
                    {
                        info = new SubdirInfo(row);
                        _dict[info.Id] = info;
                    }
                    else info.Reload(row);
	            }
	            
	        }
	        if (OnReload != null)
	        {
	            OnReload();
	        }
        }
	    
        public static IEnumerable GetAll()
        {
            foreach (var row in _instance._dict.Values)
            {
                yield return row;
            }
        }
        
        public static SubdirInfo GetByPrimaryKey(string primaryKey)
        {
            SubdirInfo info;
            if (_instance._dict.TryGetValue(primaryKey, out info)) return info;
            return null;
        }
    }

	/// <summary>
	/// Auto Generate for Tab File: Subdir/__.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class SubdirInfo : TableRowParser
	{
		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id { get; private set;}
        
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name { get; private set;}
        

        internal SubdirInfo(TableRow row)
        {
            Reload(row);
        }

        internal void Reload(TableRow row)
        {
        
            Id = row.Get_string(row.Values[0], "");
        
            Name = row.Get_string(row.Values[1], "");
        
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static string ParsePrimaryKey(TableRow row)
        {
            var primaryKey = row.Get_string(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: Subdir/SubSubDir/Example3.bytes
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class SubdirSubSubDirExample3Infos
    {
		public static readonly string TabFilePath = "Subdir/SubSubDir/Example3.bytes";
        static SubdirSubSubDirExample3Infos _instance = new SubdirSubSubDirExample3Infos();
        Dictionary<string, SubdirSubSubDirExample3Info> _dict = new Dictionary<string, SubdirSubSubDirExample3Info>();

        /// <summary>
        /// Trigger delegate when reload the infos
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private SubdirSubSubDirExample3Infos()
	    {
            ReloadAll();
#if UNITY_EDITOR
	        if (SettingModule.IsFileSystemMode)
	        {
	            SettingModule.WatchSetting(TabFilePath, (path) =>
	            {
	                if (path.Replace("\\", "/").EndsWith(path))
	                {
                        ReloadAll();
	                    KLogger.LogConsole_MultiThread("Reload success! -> " + path);
	                }
	            });
	        }
#endif
        }

	    public void ReloadAll()
        {
	        using (var tableFile = SettingModule.Get(TabFilePath))
	        {
	            foreach (var row in tableFile)
	            {
                    var pk = SubdirSubSubDirExample3Info.ParsePrimaryKey(row);
                    SubdirSubSubDirExample3Info info;
                    if (!_dict.TryGetValue(pk, out info))
                    {
                        info = new SubdirSubSubDirExample3Info(row);
                        _dict[info.Id] = info;
                    }
                    else info.Reload(row);
	            }
	            
	        }
	        if (OnReload != null)
	        {
	            OnReload();
	        }
        }
	    
        public static IEnumerable GetAll()
        {
            foreach (var row in _instance._dict.Values)
            {
                yield return row;
            }
        }
        
        public static SubdirSubSubDirExample3Info GetByPrimaryKey(string primaryKey)
        {
            SubdirSubSubDirExample3Info info;
            if (_instance._dict.TryGetValue(primaryKey, out info)) return info;
            return null;
        }
    }

	/// <summary>
	/// Auto Generate for Tab File: Subdir/SubSubDir/Example3.bytes
    /// Singleton class for less memory use
	/// </summary>
	public partial class SubdirSubSubDirExample3Info : TableRowParser
	{
		
        /// <summary>
        /// ID Column/编号/主键
        /// </summary>
        public string Id { get; private set;}
        
        /// <summary>
        /// Name/名字
        /// </summary>
        public string Name { get; private set;}
        

        internal SubdirSubSubDirExample3Info(TableRow row)
        {
            Reload(row);
        }

        internal void Reload(TableRow row)
        {
        
            Id = row.Get_string(row.Values[0], "");
        
            Name = row.Get_string(row.Values[1], "");
        
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static string ParsePrimaryKey(TableRow row)
        {
            var primaryKey = row.Get_string(row.Values[0], "");
            return primaryKey;
        }
	}
 
}
